definitions:
  api.APIDataFieldErrorResponseField:
    properties:
      field:
        type: string
      message:
        type: string
    type: object
  api.DataValidationErrorAPIResponse:
    properties:
      error:
        items:
          $ref: '#/definitions/api.APIDataFieldErrorResponseField'
        type: array
    type: object
  input_contracts.CreateMessageApiInputContract:
    properties:
      description:
        type: string
      name:
        maxLength: 45
        minLength: 1
        type: string
      schema_id:
        type: string
      schema_version:
        minimum: 1
        type: integer
    required:
    - name
    - schema_id
    - schema_version
    type: object
  input_contracts.CreateModifyProjectApiInputContract:
    properties:
      description:
        type: string
      name:
        maxLength: 45
        minLength: 1
        type: string
    required:
    - name
    type: object
  input_contracts.CreateSchemaApiInputContract:
    properties:
      description:
        type: string
      name:
        maxLength: 45
        minLength: 1
        type: string
      schema:
        type: string
      type:
        enum:
        - jsonschema
        type: string
    required:
    - name
    - schema
    - type
    type: object
  input_contracts.ModifySchemaApiInputContract:
    properties:
      schema:
        type: string
    required:
    - schema
    type: object
  input_contracts.SignInSignUpApiInputContract:
    properties:
      email:
        type: string
      password:
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  logic.MessageDBSerializerStruct:
    properties:
      created_at:
        type: string
      created_by_id:
        type: string
      created_by_name:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      project_id:
        type: string
      schema_id:
        type: string
      schema_version:
        type: integer
      status:
        type: string
    type: object
  logic.ProjectDBSerializerStruct:
    properties:
      created_by_id:
        type: string
      created_by_name:
        type: string
      created_by_type:
        type: string
      description:
        type: string
      id:
        type: string
      is_private:
        type: boolean
      name:
        type: string
      status:
        type: string
    type: object
  logic.SchemaDBSerializerStruct:
    properties:
      created_by_id:
        type: string
      created_by_name:
        type: string
      created_by_type:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      project_id:
        type: string
      schema:
        type: string
      status:
        type: string
      type:
        type: string
      version:
        type: integer
    type: object
  logic.SchemaEditDBSerializerStruct:
    properties:
      created_at:
        type: string
      created_by_name:
        type: string
      schema:
        type: string
      schema_id:
        type: string
      user_id:
        type: string
      version:
        type: integer
    type: object
  logic.UserDBSerializerStruct:
    properties:
      handle:
        type: string
      id:
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
  description: API Server for FusionCat application
  title: FusionCat API
  version: "1.0"
paths:
  /v1/protected/authentication:
    get:
      consumes:
      - application/json
      description: Read personal information of  user who owns the authentication
        token
      produces:
      - application/json
      responses:
        "200":
          description: Empty response indicating successful authentication
        "401":
          description: 'Access denied: missing or invalid Authorization header'
      security:
      - BearerAuth: []
      summary: Read personal information of  user who owns the authentication token
      tags:
      - Authentication related
  /v1/protected/me:
    get:
      consumes:
      - application/json
      description: Read personal information of  user who owns the authentication
        token
      produces:
      - application/json
      responses:
        "200":
          description: User information
          schema:
            $ref: '#/definitions/logic.UserDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
      security:
      - BearerAuth: []
      summary: Read personal information of  user who owns the authentication token
      tags:
      - Authentication related
  /v1/protected/projects:
    get:
      description: Get information about projects I am a member of
      produces:
      - application/json
      responses:
        "200":
          description: Response with projects information
          schema:
            items:
              $ref: '#/definitions/logic.ProjectDBSerializerStruct'
            type: array
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get information about projects I am a member of
      tags:
      - Projects
    post:
      description: Create a new project
      parameters:
      - description: Project create request payload
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/input_contracts.CreateModifyProjectApiInputContract'
      produces:
      - application/json
      responses:
        "200":
          description: New project has been created
          schema:
            $ref: '#/definitions/logic.ProjectDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Project with this name already exists
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: JSON payload validation errors
          schema:
            $ref: '#/definitions/api.DataValidationErrorAPIResponse'
      security:
      - BearerAuth: []
      summary: Create a new project
      tags:
      - Projects
  /v1/protected/projects/{id}:
    get:
      description: Get information about a single project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Response with project information
          schema:
            $ref: '#/definitions/logic.ProjectDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get information about a single project
      tags:
      - Projects
  /v1/protected/projects/{id}/messages:
    get:
      description: Get list of messages in a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of messages in project
          schema:
            items:
              $ref: '#/definitions/logic.MessageDBSerializerStruct'
            type: array
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get messages in project
      tags:
      - Messages
    post:
      consumes:
      - application/json
      description: Create a new message in a project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Message creation payload
        in: body
        name: message
        required: true
        schema:
          $ref: '#/definitions/input_contracts.CreateMessageApiInputContract'
      produces:
      - application/json
      responses:
        "200":
          description: Created message
          schema:
            $ref: '#/definitions/logic.MessageDBSerializerStruct'
        "400":
          description: Schema does not belong to this project or schema version does
            not exist
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Project or schema not found
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: Message with this name already exists in this project
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: JSON payload validation errors
          schema:
            $ref: '#/definitions/api.DataValidationErrorAPIResponse'
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create message
      tags:
      - Messages
  /v1/protected/projects/{id}/schemas:
    get:
      description: Get all schemas in project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of schemas in project
          schema:
            items:
              $ref: '#/definitions/logic.SchemaDBSerializerStruct'
            type: array
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Project not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get all schemas in project
      tags:
      - Schemas
    post:
      consumes:
      - application/json
      description: Create new schema in project
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: New schema request payload
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/input_contracts.CreateSchemaApiInputContract'
      produces:
      - application/json
      responses:
        "200":
          description: Nodified schema
          schema:
            $ref: '#/definitions/logic.SchemaDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
        "404":
          description: Project not found
        "422":
          description: JSON payload validation errors
          schema:
            $ref: '#/definitions/api.DataValidationErrorAPIResponse'
      security:
      - BearerAuth: []
      summary: Create new schema in project
      tags:
      - Schemas
  /v1/protected/schemas/{schemaID}:
    get:
      description: Get schema
      parameters:
      - description: Schema ID
        in: path
        name: schemaID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schema information
          schema:
            $ref: '#/definitions/logic.SchemaDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Schema not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get schema
      tags:
      - Schemas
    put:
      consumes:
      - application/json
      description: Modify schema by creating a new version
      parameters:
      - description: Schema ID
        in: path
        name: schemaID
        required: true
        type: string
      - description: Schema modification payload
        in: body
        name: schema
        required: true
        schema:
          $ref: '#/definitions/input_contracts.ModifySchemaApiInputContract'
      produces:
      - application/json
      responses:
        "200":
          description: Modified schema
          schema:
            $ref: '#/definitions/logic.SchemaDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Schema not found
          schema:
            additionalProperties:
              type: string
            type: object
        "422":
          description: JSON payload validation errors
          schema:
            $ref: '#/definitions/api.DataValidationErrorAPIResponse'
      security:
      - BearerAuth: []
      summary: Modify schema
      tags:
      - Schemas
  /v1/protected/schemas/{schemaID}/versions:
    get:
      description: Get list of schema versions
      parameters:
      - description: Schema ID
        in: path
        name: schemaID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of schema versions
          schema:
            items:
              $ref: '#/definitions/logic.SchemaEditDBSerializerStruct'
            type: array
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Schema not found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get list of schema versions
      tags:
      - Schemas
  /v1/protected/schemas/{schemaID}/versions/{versionID}:
    get:
      description: Get a single schema version
      parameters:
      - description: Schema ID
        in: path
        name: schemaID
        required: true
        type: string
      - description: Version ID (integer number)
        in: path
        name: versionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Schema version information
          schema:
            $ref: '#/definitions/logic.SchemaEditDBSerializerStruct'
        "401":
          description: 'Access denied: missing or invalid Authorization header'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Schema version not found or can't be accessed by user
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Get a single schema version
      tags:
      - Schemas
  /v1/public/authentication:
    post:
      consumes:
      - application/json
      description: Sign in via login and password
      parameters:
      - description: Sign in request payload
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/input_contracts.SignInSignUpApiInputContract'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully signed in
          schema:
            $ref: '#/definitions/logic.UserDBSerializerStruct'
        "401":
          description: Invalid login or password
        "422":
          description: JSON payload validation errors
          schema:
            $ref: '#/definitions/api.DataValidationErrorAPIResponse'
      summary: Sign in via login and password
      tags:
      - Authentication related
  /v1/public/users:
    post:
      consumes:
      - application/json
      description: Sign up via email and password with optional invitation code
      parameters:
      - description: Sign up request payload
        in: body
        name: project
        required: true
        schema:
          $ref: '#/definitions/input_contracts.SignInSignUpApiInputContract'
      - description: Optional invitation code
        in: query
        name: code
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successful sign up
          schema:
            $ref: '#/definitions/logic.UserDBSerializerStruct'
        "409":
          description: User with specified email is already registered in the system
        "422":
          description: JSON payload validation error
          schema:
            $ref: '#/definitions/api.DataValidationErrorAPIResponse'
      summary: Sign up via email and password
      tags:
      - Authentication related
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
